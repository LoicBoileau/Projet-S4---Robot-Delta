import cv2
import numpy as np
import csv
from numpy import zeros


def lecture_image(Nom_Image_Enregistree):
    #Lecture de l'image (doit être en format png et dans le même fichier que le code
    image = cv2.imread(Nom_Image_Enregistree)
    return image


def convertir_HSV(image):
    #Converti l'image de couleur en format HSV
    image_HSV = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
    return image_HSV


def prise_photo(cadre, Compteur_Image):
    #Prends la photo et l'enregistre
    Nom_Image_Enregistree = 'Image{}.png'.format(Compteur_Image)
    cv2.imwrite(Nom_Image_Enregistree, cadre)
    print("{} La photo a été prise!".format(Nom_Image_Enregistree))
    return Nom_Image_Enregistree


def ecriture_csv(coordonnee_bleu, coordonnee_noir, Compteur_Image):
    #Écriture des valeurs dans un fichier CSV
    nom_du_fichier = 'Position{}.csv'.format(Compteur_Image)

    with open(nom_du_fichier, 'w') as f:
        ecriture = csv.writer(f, delimiter='\t')
        somme_coordonnee = len(coordonnee_bleu) + len(coordonnee_noir)
        f.write('{0}-{1}-{2}\n'.format(len(coordonnee_bleu),len(coordonnee_noir),somme_coordonnee))

        for z in coordonnee_bleu:
            ecriture.writerow(z)
        f.write('\n')

        for z in coordonnee_noir:
            ecriture.writerow(z)


def nombre_contours(image_HSV, limite_inferieure, limite_superieure):
    #créé un masque qui isole juste une couleur
    masque = cv2.inRange(image_HSV, limite_inferieure, limite_superieure)
    #cv2.imshow('masque', masque)

    retour, seuil = cv2.threshold(masque, 127, 255, 0)
    #Trouve les contours dans le masque
    image2, contours, hierarchy = cv2.findContours(seuil, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
    return contours


def calcul_coordonnee(image, contours, Couleur_Choisie):
    #Calcul les points milieu des contours d'une couleur choisie
    coordonnee = zeros([len(contours), 3])
    i = 0

    for c in contours:
        j = 0
        moment = cv2.moments(c)

        if moment["m00"] != 0:
            cX = round(moment["m10"] / moment["m00"], 3)
            cY = round(moment["m01"] / moment["m00"], 3)
        else:
            cX, cY = 0, 0

        cZ = 0
        cv2.circle(image, (int(cX), int(cY)), 5, (255, 255, 255), -1)
        cv2.putText(image, "centroid {}".format(Couleur_Choisie), (int(cX) - 50, int(cY) - 25), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2)

        coordonnee[i][j] = cX
        j = j + 1
        coordonnee[i][j] = cY
        j = j + 1
        coordonnee[i][j] = cZ
        i = i + 1
        cv2.imshow('Photo avec points milieu selon la couleur', image)

    return coordonnee

# La webcam fait une capture vidéo
camera = cv2.VideoCapture(0)
Prendre_Photo = False
Compteur_Image = 0

#Les limites des couleurs pour juste prendre des bleus et noirs dans cette intervalle
limite_inferieure_bleu = np.array([50, 120, 50])#90,60,0
limite_superieure_bleu = np.array([121, 255, 200])#121,255,200
limite_inferieure_noir = np.array([0, 0, 0])#0,0,0
limite_superieure_noir = np.array([200, 200, 80])#180,180,65


while (1):
    if camera.isOpened() == True:
        #Si la camera est ouverte, montrer la vue de la camera
        _, cadre = camera.read()
        cv2.imshow('Vue Camera', cadre)

        '''
        Nom_Image_Enregistree = prise_photo(frame, Compteur_Image)
        image = lecture_image(Nom_Image_Enregistree)
        image_HSV = convertir_HSV(image)
        masque_bleu = cv2.inRange(image_HSV, limite_inferieure_bleu, limite_superieure_bleu)
        cv2.imshow('masque_bleu', masque_bleu)
        masque_noir = cv2.inRange(image_HSV, limite_inferieure_noir, limite_superieure_noir)
        cv2.imshow('masque_noir', masque_noir)
        '''

        if Prendre_Photo == True:
            #Si une photo se fait prendre
            Compteur_Image += 1 #Pour permettre de prendre plusieurs photos
            Prendre_Photo = False
            Nom_Image_Enregistree = prise_photo(cadre, Compteur_Image)

            image = lecture_image(Nom_Image_Enregistree)
            image_HSV = convertir_HSV(image)

            contours_bleu = nombre_contours(image_HSV, limite_inferieure_bleu, limite_superieure_bleu)
            contours_noir = nombre_contours(image_HSV, limite_inferieure_noir, limite_superieure_noir)

            coordonnee_bleu = calcul_coordonnee(image, contours_bleu, 'bleu')
            coordonnee_noir = calcul_coordonnee(image, contours_noir, 'noir')
            print('Nombre de bloc(s) bleu(s): ',len(coordonnee_bleu))
            print('Nombre de bloc(s) noir(s): ',len(coordonnee_noir))
            print('Somme de bloc(s): ', len(coordonnee_bleu) + len(coordonnee_noir))
            ecriture_csv(coordonnee_bleu, coordonnee_noir, Compteur_Image)

    else:
        print("La camera ne s'est pas ouverte correctement. Fermeture du programme")
        break

    bouton = cv2.waitKey(1) #le bouton pesé sur le clavier

    if bouton % 256 == 27:
        #Bouton escape
        print("Fermeture du programme avec l'appui de escape")
        break
    elif bouton % 256 == 32:
        #Bouton espace
        Prendre_Photo = True

#ferme la camera et le programme
camera.release()
cv2.destroyAllWindows()
