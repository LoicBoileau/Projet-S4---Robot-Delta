% MotionGenesis file:  MGTemplateBasic.txt
% Copyright (c) 2009-2019 Motion Genesis LLC.  Only for use with MotionGenesis.
%------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
%   Physical objects.
NewtonianFrame  N               % Newtonian reference frame
RigidFrame      A, B, C, PA3, PB3, PC3
RigidBody       A1, A2, B1, B2, C1, C2, P       % Technical name of body
% RigidFrame      B                % Comment
% Particle        Q                % Comment
Point           NA( N ), NB( N ), NC( N )
Point           AN( A1 ), BN( B1 ), CN( C1 )
Point           A12( A2 ), B12( B2 ), C12( C2 )          % Comment.
Point           AP( A2 ), BP( B2 ), CP( C2 )
Point           PA( P ), PB( P ), PC( P )
% Point           PAo( P ), PBo( P ), PCo( P )
%------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
%   Mathematical declarations.
Specified    qA1'', qB1'', qC1''
Variable    qA2'', qB2'', qC2''    % qA1 and its 1st and 2nd derivatives.
Variable    qA3'', qB3'', qC3''    % qA1 and its 1st and 2nd derivatives.
Variable    Px'', Py'', Pz''
Constant    l1 = 0.1 m, l2 = 0.23 m, l3 = -0.030185 m
Constant    mA1, mA2, mB1, mB2, mC1, mC2, mP    % arms masses
Constant    g = 9.80665 m/s^2    % Earth's gravitational acceleration
Constant    anglu = 120 deg
% Specified   TA                   % Torque on A from N
%------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
%   Mass and inertia properties.
A1.SetMass( mA1 )
A2.SetMass( mA2 )
B1.SetMass( mB1 )
B2.SetMass( mB2 )
C1.SetMass( mC1 )
C2.SetMass( mC2 )
P.SetMass( mP )

% A1.SetInertia( A1cm, IA1xx = 1998484.9 g*mm^2, IA1yy = 1528374.84 g*mm^2, IA1zz = 1958962.32 g*mm^2, IA1xy = 3252       g*mm^2, IA1yz = -144721.64 g*mm^2, IA1zx = -46319.17  g*mm^2 )
% A2.SetInertia( A2cm, IA2xx = 444154.15 g*mm^2, IA2yy = 234179.69  g*mm^2, IA2zz = 409654.82  g*mm^2, IA2xy = -116546.41 g*mm^2, IA2yz = 124897.43  g*mm^2, IA2zx = -105726.93 g*mm^2 )
% B1.SetInertia( B1cm, IB1xx = 1998484.9 g*mm^2, IB1yy = 1528374.84 g*mm^2, IB1zz = 1958962.32 g*mm^2, IB1xy = 3252       g*mm^2, IB1yz = -144721.64 g*mm^2, IB1zx = -46319.17  g*mm^2 )
% B2.SetInertia( B2cm, IB2xx = 444154.15 g*mm^2, IB2yy = 234179.69  g*mm^2, IB2zz = 409654.82  g*mm^2, IB2xy = -116546.41 g*mm^2, IB2yz = 124897.43  g*mm^2, IB2zx = -105726.93 g*mm^2 )
% C1.SetInertia( C1cm, IC1xx = 1998484.9 g*mm^2, IC1yy = 1528374.84 g*mm^2, IC1zz = 1958962.32 g*mm^2, IC1xy = 3252       g*mm^2, IC1yz = -144721.64 g*mm^2, IC1zx = -46319.17  g*mm^2 )
% C2.SetInertia( C2cm, IC2xx = 444154.15 g*mm^2, IC2yy = 234179.69  g*mm^2, IC2zz = 409654.82  g*mm^2, IC2xy = -116546.41 g*mm^2, IC2yz = 124897.43  g*mm^2, IC2zx = -105726.93 g*mm^2 )
A1.SetInertia( A1cm, IA1xx, IA1yy, IA1zz )
A2.SetInertia( A2cm, IA2xx, IA2yy, IA2zz )
B1.SetInertia( B1cm, IB1xx, IB1yy, IB1zz )
B2.SetInertia( B2cm, IB2xx, IB2yy, IB2zz )
C1.SetInertia( C1cm, IC1xx, IC1yy, IC1zz )
C2.SetInertia( C2cm, IC2xx, IC2yy, IC2zz )
P.SetInertia( Pcm, Pxx, Pyy, Pzz )
%------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
%   Rotational kinematics.
A.Rotatey( N, 0 )
B.Rotatey( N, anglu )
C.RotateNegativey( N, anglu )

A1.RotateZ( A, qA1 )
B1.RotateZ( B, qB1 )
C1.RotateZ( C, qC1 )

A2.RotateZ( A1, qA2 )
B2.RotateZ( B1, qB2 )
C2.RotateZ( C1, qC2 )

PA3.RotateZ( A2, qA3 )
PB3.RotateZ( B2, qB3 )
PC3.RotateZ( C2, qC3 )

P.RotateZ( N, 0 )

% //***********************************************
% To stop MG from bitching like a little bitch, yo
A.SetAngularVelocity( N, 0> )
B.SetAngularVelocity( N, 0> )
C.SetAngularVelocity( N, 0> )
P.SetAngularVelocity( N, 0> )
% //***********************************************
%------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
%   Translational kinematics.

NA.Translate( No, 0.12 * Ax> )
NB.Translate( No, 0.12 * Bx> )
NC.Translate( No, 0.12 * Cx> )

AN.Translate( NA, 0> )
BN.Translate( NB, 0> )
CN.Translate( NC, 0> )

A12.Translate( AN, l1 * a1x> )
B12.Translate( BN, l1 * b1x> )
C12.Translate( CN, l1 * c1x> )

AP.Translate( A12, l2 * a2x> )
BP.Translate( B12, l2 * b2x> )
CP.Translate( C12, l2 * c2x> )

PA.Translate( AP, 0> )
PB.Translate( BP, 0> )
PC.Translate( CP, 0> )

Pcm.Translate( PA, -l3 * PA3x> )
Pcm.Translate( PB, -l3 * PB3x> )
Pcm.Translate( PC, -l3 * PC3x> )

Po.Translate( Pcm, 0> )

A1cm.Translate( AN, 0.08979 * a1x> - 0.13516 * a1y> - 0.10491 * a1z> )
B1cm.Translate( BN, 0.08979 * b1x> - 0.13516 * b1y> - 0.10491 * b1z> )
C1cm.Translate( CN, 0.08979 * c1x> - 0.13516 * c1y> - 0.10491 * c1z> )

A2cm.Translate( A12, 0.08979 * a2x> - 0.13516 * a2y> - 0.10491 * a2z> )
B2cm.Translate( B12, 0.08979 * b2x> - 0.13516 * b2y> - 0.10491 * b2z> )
C2cm.Translate( C12, 0.08979 * c2x> - 0.13516 * c2y> - 0.10491 * c2z> )

% Q.SetPcmsition( No, PcmsitionVector> )
% Q.Translate( No, PcmsitionVector> )          % Sets Pcmsition, velocity, acceleration
% Q.SetVelocityAcceleration( N, velVector> )  % Differentiates to find acceleration
%------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
%   Motion constraints (if any).

% MotionConstraint[1] = u2 - u1
% MotionConstraint[2] = Dot( Q.GetVelocity(N), Ax> )
% MotionConstraint[3] = Dot( Q.GetVelocity(N), Ay> )

% SetDt( qA1 = 45 )
% SetDt( qB1 = 50 )
% SetDt( qC1 = 55 )

% SolveDt( MotionConstraint, u3, u4, u5 )
%------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
%   Add relevant contact/distance forces.
% System.AddForceGravity( -g*Ny> )
% Q.AddForce( someVector> )                   % External force
% Q.AddForce( P, actionReactionForce> )       % Law of action/reaction
%------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
% %   Add relevant torques.
% A.AddTorque( SomeVector> )                  % External torque
% B.AddTorque( A, actionReactionTorque> )     % Law of action/reaction
%------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
%   F = m*a    (translational equations of motion).
% Dynamics[1] = Dot(  B.GetDynamics(),  Nx>  )
% Dynamics[2] = Dot(  B.GetDynamics(),  Ny>  )
%------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
%   M = DH/Dt  (rotational equations of motion).
% Dynamics[3] = Dot(  B.GetDynamics(Bcm),  Bz>  )
%------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
%   Solve linear equations for list of unknowns.

MotionConstraint[1] = Dot( System.GetDynamics(), Nx> )
MotionConstraint[2] = Dot( System.GetDynamics(), Ny> )
MotionConstraint[3] = Dot( System.GetDynamics(), Nz> )
MotionConstraint[4] = Dot( p_PA_Pcm> - p_PB_Pcm> + p_PC_Pcm> - p_Pcm_Po>, Nx> )
MotionConstraint[5] = Dot( p_PA_Pcm> - p_PB_Pcm> + p_PC_Pcm> - p_Pcm_Po>, Ny> )
MotionConstraint[6] = Dot( p_PA_Pcm> - p_PB_Pcm> + p_PC_Pcm> - p_Pcm_Po>, Nz> )
% MotionConstraint[7] = AN.GetPosition( No ) + A12.GetPosition( AN ) + AP.GetPosition( A12 ) + Po.GetPosition( AP ) + No.GetPosition( Po )
% MotionConstraint[8] = BN.GetPosition( No ) + B12.GetPosition( BN ) + BP.GetPosition( B12 ) + Po.GetPosition( BP ) + No.GetPosition( Po )
% MotionConstraint[9] = CN.GetPosition( No ) + C12.GetPosition( CN ) + CP.GetPosition( C12 ) + Po.GetPosition( CP ) + No.GetPosition( Po )
% MotionConstraint[4] = 90 - qA1 - qA2 - Dot( Po.GetPosition( ), Ny> )
% MotionConstraint[5] = 90 - qB1 - qB2 - Dot( Po, Ny> )
% MotionConstraint[6] = 90 - qC1 - qC2 - Dot( Po, Ny> )

% PPos[1] = Dot( Po.GetPosition( No ), Nx> ) - 30
% PPos[2] = Dot( Po.GetPosition( No ), Ny> ) - 40
% PPos[3] = Dot( Po.GetPosition( No ), Nz> ) - 20
PPos[1] = Dot( Po.GetPosition( No ), Nx> ) - Px
PPos[2] = Dot( Po.GetPosition( No ), Ny> ) - Py
PPos[3] = Dot( Po.GetPosition( No ), Nz> ) - Pz

% MotionConstraint[4] = 2*qA1 + 2*qA2 - 180
% MotionConstraint[5] = 2*qB1 + 2*qB2 - 180
% MotionConstraint[6] = 2*qC1 + 2*qC2 - 180

MotionConstraint[7] = Dot(AN.GetPosition( No ) + A12.GetPosition( AN ) + AP.GetPosition( A12 ) + PB.GetPosition( AP ) + B12.GetPosition( PB ) + BN.GetPosition( B12 ) + No.GetPosition( BN ) + BN.GetPosition( No ) + B12.GetPosition( BN ) + BP.GetPosition( B12 ) + PC.GetPosition( BP ) + C12.GetPosition( PC ) + CN.GetPosition( C12 ) + No.GetPosition( CN ) + CN.GetPosition( No ) + C12.GetPosition( CN ) + CP.GetPosition( C12 ) + PA.GetPosition( CP ) + A12.GetPosition( PA ) + AN.GetPosition( A12 ) + No.GetPosition( AN ), Nx> )
MotionConstraint[8] = Dot(AN.GetPosition( No ) + A12.GetPosition( AN ) + AP.GetPosition( A12 ) + PB.GetPosition( AP ) + B12.GetPosition( PB ) + BN.GetPosition( B12 ) + No.GetPosition( BN ) + BN.GetPosition( No ) + B12.GetPosition( BN ) + BP.GetPosition( B12 ) + PC.GetPosition( BP ) + C12.GetPosition( PC ) + CN.GetPosition( C12 ) + No.GetPosition( CN ) + CN.GetPosition( No ) + C12.GetPosition( CN ) + CP.GetPosition( C12 ) + PA.GetPosition( CP ) + A12.GetPosition( PA ) + AN.GetPosition( A12 ) + No.GetPosition( AN ), Ny> )
MotionConstraint[9] = Dot(AN.GetPosition( No ) + A12.GetPosition( AN ) + AP.GetPosition( A12 ) + PB.GetPosition( AP ) + B12.GetPosition( PB ) + BN.GetPosition( B12 ) + No.GetPosition( BN ) + BN.GetPosition( No ) + B12.GetPosition( BN ) + BP.GetPosition( B12 ) + PC.GetPosition( BP ) + C12.GetPosition( PC ) + CN.GetPosition( C12 ) + No.GetPosition( CN ) + CN.GetPosition( No ) + C12.GetPosition( CN ) + CP.GetPosition( C12 ) + PA.GetPosition( CP ) + A12.GetPosition( PA ) + AN.GetPosition( A12 ) + No.GetPosition( AN ), Nz> )

% Solve( MotionConstraint, qA1'', qB1'', qC1'' )
Solve( MotionConstraint, qA1'', qB1'', qC1'', qA2'', qB2'', qC2'', qA3'', qB3'', qC3'' )
% Solve( [qA1'', qB1'', qC1''], qA1, qB1, qC1 )
% Solve( PPos, qA1, qB1, qC1 )
Solve( PPos, Px, Py, Pz )
% Solve( Dynamics,  x'', y'', Fx, Fy )
%------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
%   Initial values for variables (e.g., for ODE command).
Input  qA1 = 0 deg,  qA1' = 0.1 rad/sec
Input  qB1 = 0 deg,  qB1' = 0.1 rad/sec
Input  qC1 = 0 deg,  qC1' = 0.1 rad/sec

Input tFinal = 10
Input mA1 = 5
Input mA2 = 2
Input mB1 = 5
Input mB2 = 2
Input mC1 = 5
Input mC2 = 2
Input mP = 10

% Input  qA1' = 0 rad/sec, qA1'' = 0 rad/sec^2
% Input  qB1' = 0 rad/sec, qB1'' = 0 rad/sec^2
% Input  qC1' = 0 rad/sec, qC1'' = 0 rad/sec^2
%------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
%   Other calculations (distance, energy, momentum, etc.).
% xQ = Dot(  Q.GetPosition(No),  Nx>  )
% KineticEnergy = System.GetKineticEnergy()
% GravityPcmtentialEnergy = System.GetForceGravityPcmtentialEnergy( -g*Ny>, No )
% MechanicalEnergy = KineticEnergy + GravityPcmtentialEnergy
% H> = System.GetAngularMomentum( aboutPcmint )
% L> = EvaluateAtInput( System.GetLinearMomentum() )
%------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
%   List output quantities (e.g., for ODE command).
Output      t sec,  qA1 degrees,  qB1 degrees, qC1 degrees, Px m, Py m, Pz m
% OutputPlot  t sec,  qA1 degrees,  qB1 degrees, qC1 degrees
%------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
%   Solve ODEs (or auto-generate MATLAB, C, Fortran, ... code).
% Input  tFinal = 10 sec,  tStep = 0.02 sec,  absError = 1.0E-08
% ODE()  Filename    % or ODE( Zero, listOfVariablesToSolve ) Filename.m
% ODE( PPos, qA1, qB1, qC1 )
ODE()
%------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
%   Record input together with resPcmnses.
% Save  someFileName.txt
% Quit



